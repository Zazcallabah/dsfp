//--------------------------------------
//--- 010 Editor v5.0 Binary Template
//
// File: Backpack.bt
// Author: Tarvitz
// Revision: 0.0.1
// Purpose: for DarkSouls_PTDE.bt
//--------------------------------------
#include "items/types.bt"


string ReadBoxTypeAndItem(uint type_and_item){
    string result;
    // ; // <-- only item id, without type mask
	Item it = (type_and_item & ~0xF0000000);
    SPrintf(result, "%s", EnumToString( it));
    if (type_and_item == 0xFFFFFFFF){
        result = "---clean---";
    }
    return result;
}

typedef enum<uint>{
    clean      = 0xFFFFFFFF,
    weapon     = 0x00000000,
    armour     = 0x10000000,
    rings      = 0x20000000,
    unknown    = 0x30000000,
    items      = 0x40000000,
} ItemType;

typedef struct{
    ItemType type<name="type">;

    if( type == 0x40000000 )
        UsableItem item<name="item">;
    else if( type == armour )
        ItemArmor item<name="armor">;
    else if( type == rings )
        ItemRing item<name="ring">;
    else if( type == weapon )
        ItemWeapon item<name="weapon">;
    else
        Item item;

    uint amount<name="amount">;

	// index? 12 lsb is index, the 20 msb are used for sorting. is index just another unique identifier?
	// is the endianness screwing up these fields? because this makes no sense? OH THEY ARE THE WRONG WAY AROUND *FACEDESK*
	
    uint index:12;
    uint sort : 20;
	
    uint have<name="have">; // quantity? enabled? have is ambiguous
    uint durability<name="item durability">;
    // durability hits treats logic: each hit that have been reach its target
    // for example it could be event wall or enemy accumulates 1/2/etc points
    // int durability_hits accumulator. Then durability hits reaches 10
    // the accumulator blanks and durability losts 1 point.
    uint durability_hits <name="durability hits">;
} Backpack <read=sl>;


string sl(Backpack &b) {
    string result;
    SPrintf(result, "%s", EnumToString( b.item ));
    return result;
}


typedef struct{
    uint blank;
    uint type_and_item<read=ReadBoxTypeAndItem>;
    uint unknown1;
    uint unknown2;
    uint durability;
    uint unknown4;
    uint unknown5;
    uint unknown6;
} BottomlessBox;

typedef struct{
    uint unknown1;
    uint unknown2;
    uint unknown3;
    uint unknown4;
    uint unknown5;
    uint unknown6;
    uint unknown7;
    uint unknown8;
} UnknownBox;

typedef struct (uint size, uint used){
   Backpack used_box[used] <optimize=false>;
   Backpack empty_box[size-used] <comment="empty box part">;
} PartiallyUsedBox;