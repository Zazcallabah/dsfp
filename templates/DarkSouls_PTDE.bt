//--------------------------------------
//--- 010 Editor v5.0 Binary Template
//
// File: DRAKS0005.sl2
// Author: Tarvitz
// Revision: 0.0.1
// Purpose: 4 fun
//--------------------------------------

#include "meta.bt";
#include "character.bt";
#include "unknown.bt";
#include "backpack.bt"

typedef struct{
    HP hp <fgcolor=cLtRed>;
    MAGIC_DEF magic_def <comment="it could be probably no magical defence">;
    uint unknown_1;
    STAMINA stamina <fgcolor=cLtBlue>;
    uint unknown_2;
    CharStats body;
    StatsUnknown2 unknown_;
  
    uint poison_resistance;
    uint bleeding_resistence;
    uint poison_resistance_2;
    uint curse_resistence;
    uint unknown_3 <comment="could be resistence">;

    CharFace face;
    CharHairColor hair_color;
    CharHair hair_2;
} Stats;

typedef struct{
    uint first;
    uint second;
    uint third;
    uint fourth;
    uint fifth;
} QuickItems;

typedef enum<uint>{
    hand = 1,
    double_hand = 3
} WeildType;

typedef enum<uint>{
    off = 0,
    on = 1
} Switch;

typedef enum<uint>{
    bare_hand = 900000,
    nothing_body = 901000,
    nothing_hands = 902000,
    nothing_legs = 903000,
} Wargear;

typedef struct{
    BYTE skip_0[184] <bgcolor=cLtBlue>;
    uint left_arrow_slot;
    uint left_bolts_slot;
    uint right_arrows_slot;
    uint right_blots_slot;
    byte _unknown[5*4]; // 5 uint?
    uint left_ring_slot;
    uint right_ring_slot;
    QuickItems quick_items_slots <comment="item types in item quick slots">;
    WeildType weild_type;
    Switch left_hand;
    Switch right_hand;
    Switch _unknown1;
    Switch _unknown2;
    Switch _unknown3;
    Switch _unknown4;
    Wargear left_hand_first;
    Wargear left_hand_second;
    Wargear right_hand_first;
    Wargear left_hand_second;
    Item left_item_arrows_slot;
    Item left_item_bolts_slot;
    Item right_item_arrows_slot;
    Item right_item_bolts_slot;
    Wargear head;
    Wargear body;
    Wargear hands;
    Wargear legs;
    Item _unknown_item;
    Item left_ring;
    Item right_ring;
    QuickItems quick_items <bgcolor=cLtPurple>;
} Pack;

typedef struct {
    // Header for the file
    char     dsSignature[8] <comment="BND4 file format">;    //0x424e4434 0x00000000
    uint     dsUnknown <comment="May be revision">;
    uint     dsContainersAmount <bgcolor=cLtBlue, 
                                 comment="Amount of file save slots 10 available + 1 hidden">; // container size
    uint     dsUnknown2;
    uint     dsUnkwown3;
    char     dsVersion[16] <comment="Probably a version">;
    uint     dsSize <bgcolor=cLtRed,
                     name="block size",
                     comment="Meta size">;  // it points for a first readable file slot block (end of metadata block)\
    uint     ds_reserved1;
    uint     ds_uint_unknown1;
    byte     ds_char_unknown2[12];
    SlotMeta chunks[dsContainersAmount];
    DSSaveMeta file_slots[dsContainersAmount];
    char      end_meta[2];
    
    local uint i;
    // at least parse only first slot, remove "/ dsContainersAmount to identify other data"
    for (i = 0; i < (dsContainersAmount / dsContainersAmount); i++){
    struct {
          local int unknown_size_1 = sizeof(StatsUnknown1);
          local int stats_size = sizeof(Stats);
          local int pack_size = sizeof(Pack);
          local int backpack_amount = 2048; // is this hard code constant?
          local int backpack_size = sizeof(Backpack) * backpack_amount;
          local int space = (
                unknown_size_1 + stats_size + pack_size + backpack_size
                + 12 // backpack: items amount, keys amount, size
          );

          StatsUnknown1 unknown <comment="unknown data">;
          Stats stats;
          Pack pack;
          uint backpack_items_amount;
          uint backpack_keys_amount;
          uint backpack_size;
          // 0-63 indexes for utils box
          local uint utilbox_size = 64;
          local uint itembox_size = backpack_size - utilbox_size;
          Backpack util_box[utilbox_size] <name="util box">;
          Backpack item_box[itembox_size] <name="item box">;
          BYTE data[chunks[i].block_size - space] <bgcolor=cLtYellow>;
          BYTE offset[chunks[i].space_size] <bgcolor=cLtRed>;
        } SaveSlot;
    }

} DSSaveFile <read=ReadDSSaveFile>;

string ReadDSSaveFile(DSSaveFile &file )
{
    if( exists( file.dsSignature ) )
        return file.dsSignature;
    else
        return "";
}

local uint tag;
LittleEndian(); 
//while( !FEof() )
//{
    // Read a tag
    tag = ReadUInt( FTell() );

    // IDENTIFY BND4 token
    if( tag == 0x34444e42 )
    {
        SetBackColor( cLtGray );
        DSSaveFile record;
    }
    else{
        Warning("Not a Dark Souls prepare to die edition file save format");
        return -1;
    }
//}
