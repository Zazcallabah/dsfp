//--------------------------------------
//--- 010 Editor v5.0 Binary Template
//
// File: DRAKS0005.sl2
// Author: Tarvitz
// Revision: 0.0.1
// Purpose: 4 fun
//--------------------------------------
#include "bnd4.bt";
#include "character.bt";
#include "backpack.bt"

typedef struct{
    uint first;
    uint second;
    uint third;
    uint fourth;
    uint fifth;
} QuickItems;

typedef enum<uint>{
    hand = 1,
    double_hand = 3
} WeildType;

typedef enum<uint>{
    off = 0,
    on = 1
} Switch;

typedef enum<uint>{
    bare_hand = 900000,
    nothing_body = 901000,
    nothing_hands = 902000,
    nothing_legs = 903000,
} Wargear;

typedef struct{
    BYTE unknown_block[184] <bgcolor=cLtPurple>;
    uint left_arrow_slot;
    uint left_bolts_slot;
    uint right_arrows_slot;
    uint right_blots_slot;
    byte _unknown[5*4] <bgcolor=cLtPurple>; // 5 uint?
    uint left_ring_slot;
    uint right_ring_slot;
    QuickItems quick_items_slots <comment="item types in item quick slots">;
    WeildType weild_type;
    Switch left_hand;
    Switch right_hand;
    Switch _unknown1 <bgcolor=cLtPurple>;
    Switch _unknown2 <bgcolor=cLtPurple>;
    Switch _unknown3 <bgcolor=cLtPurple>;
    Switch _unknown4 <bgcolor=cLtPurple>;
    Wargear left_hand_first;
    Wargear left_hand_second;
    Wargear right_hand_first;
    Wargear left_hand_second;
    Item left_item_arrows_slot;
    Item left_item_bolts_slot;
    Item right_item_arrows_slot;
    Item right_item_bolts_slot;
    Wargear head;
    Wargear body;
    Wargear hands;
    Wargear legs;
    Item _unknown_item <bgcolor=cLtPurple>;
    Item left_ring;
    Item right_ring;
    QuickItems quick_items <bgcolor=cLtBlue>;
} Pack;


local uint i;

// at least parse only first slot, remove "/ dsContainersAmount to identify other data"
// for (i = 0; i < (dsContainersAmount / dsContainersAmount); i++){
typedef struct {
   local int unknown_size_1 = sizeof(StatsUnknown1);
   local int stats_size = sizeof(Stats);
   local int pack_size = sizeof(Pack);
   local int backpack_amount = 2048; // is this hard code constant?
   local int one_more_box_size = 64;
   local int backpack_size = sizeof(Backpack) * backpack_amount;
   local int bottomless_size = sizeof(BottomlessBox) * backpack_amount;
   local int onemorebox_size = sizeof(UnknownBox) * one_more_box_size;
   local int space = (
       unknown_size_1 + stats_size + pack_size + backpack_size + bottomless_size +
       onemorebox_size
       + 12 // backpack: items amount, keys amount, size
   );

   StatsUnknown1 unknown <comment="unknown data", bgcolor=cLtPurple>;
   Stats stats;
   Pack pack;

   uint backpack_items_amount;
   uint backpack_keys_amount;
   uint backpack_size;
   // 0-63 indexes for utils box
   local uint utilbox_size = 64;
   local uint itembox_size = backpack_size - utilbox_size;
   Backpack util_box[utilbox_size] <name="util box">;
   Backpack item_box[itembox_size] <name="item box">;
   local uint investigate_1 = 304;
   local uint investigate_2 = 288;
   local uint investigate = investigate_1 + investigate_2;
   BYTE _investigate_block_1[investigate_1] <bgcolor=cLtPurple>;
   BottomlessBox box[backpack_amount];
   BYTE _investigate_block_2[investigate_2] <bgcolor=cLtPurple>;
   UnknownBox unknown_box[one_more_box_size];

   BYTE data[meta.chunks[i].block_size - space - investigate] <bgcolor=cLtYellow>;
   BYTE offset[meta.chunks[i].space_size] <bgcolor=cLtRed>;
} SaveSlot;

local uint tag;
LittleEndian(); 
//while( !FEof() )
//{
    // Read a tag
    tag = ReadUInt( FTell() );

    // IDENTIFY BND4 token
    if( tag == 0x34444e42)
    {
        SetBackColor( cLtGray );
        BND4 meta;
        // slots should be configurated according to record's dsContainersAmount
        if (meta.SlotMetaBlockSize == 0x20){
            SaveSlot slot_1;
        }
    }
    else{
        Warning("Not a Dark Souls prepare to die edition file save format");
        return -1;
    }
//}
